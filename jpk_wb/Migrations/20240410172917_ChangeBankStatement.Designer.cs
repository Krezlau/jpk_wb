// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using jpk_wb.Data;

#nullable disable

namespace jpk_wb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240410172917_ChangeBankStatement")]
    partial class ChangeBankStatement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("jpk_wb.Data.BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InformacjePodmiotuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumerRachunku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InformacjePodmiotuId");

                    b.ToTable("BankStatements");
                });

            modelBuilder.Entity("jpk_wb.Data.CompanyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gmina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodKraju")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NrDomu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NrLokalu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PelnaNazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Poczta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Powiat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REGON")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wojewodztwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NIP")
                        .IsUnique();

                    b.HasIndex("PelnaNazwa")
                        .IsUnique();

                    b.HasIndex("REGON")
                        .IsUnique();

                    b.ToTable("CompanyInfos");
                });

            modelBuilder.Entity("jpk_wb.Data.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataOperacji")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("KwotaOperacji")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NazwaPodmiotu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisOperacji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SaldoOperacji")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SymbolWaluty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("jpk_wb.Data.BankStatement", b =>
                {
                    b.HasOne("jpk_wb.Data.CompanyInfo", "InformacjePodmiotu")
                        .WithMany()
                        .HasForeignKey("InformacjePodmiotuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformacjePodmiotu");
                });

            modelBuilder.Entity("jpk_wb.Data.Transaction", b =>
                {
                    b.HasOne("jpk_wb.Data.BankStatement", null)
                        .WithMany("Transakcje")
                        .HasForeignKey("BankStatementId");
                });

            modelBuilder.Entity("jpk_wb.Data.BankStatement", b =>
                {
                    b.Navigation("Transakcje");
                });
#pragma warning restore 612, 618
        }
    }
}
